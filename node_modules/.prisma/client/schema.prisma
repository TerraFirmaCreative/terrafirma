// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  token    String    @unique
  email    String?
  products Product[]
  tasks    Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id               String       @id @default(uuid())
  shopifyProductId String
  discordImageUrl  String
  createdBy        User         @relation(fields: [createdById], references: [id])
  createdById      String
  imagineData      ImagineData? @relation(fields: [imagineDataId], references: [id])
  imagineIndex     Int
  imagineDataId    String?
  allowVariants    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImagineData {
  id            String    @id @default(uuid())
  imagineFlags  Int
  imagineHash   String
  imaginePrompt String
  imagineId     String
  Product       Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Should records like this be ephermeral in redis instead>
model Task {
  id     String     @id @default(uuid())
  type   TaskType
  status TaskStatus

  progress    String?
  progressUri String?
  updateUser  Boolean?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskType {
  Imagine
  ImagineVariants
}

enum TaskStatus {
  Queued
  InProgress
  Complete
  Failed
}
